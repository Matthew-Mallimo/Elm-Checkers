var _user$project$Board$checkerStyles = function (cell) {
	var selected = cell.selected ? '2px solid cyan' : 'none';
	var visible = cell.hasChecker ? 'visible' : 'hidden';
	var radius = cell.hasChecker ? '50%' : '';
	return {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: cell.chkColor},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'border', _1: selected},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'height', _1: '80px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '80px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border-radius', _1: radius},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'visibility', _1: visible},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: 'cyan'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Board$cellStyles = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: 'red'},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'height', _1: '90px'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'width', _1: '90px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid black'},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Board$cell = function (cell) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(_user$project$Board$cellStyles),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					cell.hasChecker ? _user$project$CheckerUtils$SelectCheker(cell) : _user$project$CheckerUtils$MakeMove(cell)),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						_user$project$Board$checkerStyles(cell)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(''),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Board$rowStyle = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
	_1: {ctor: '[]'}
};
var _user$project$Board$gridStyle = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid black'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'align', _1: 'center'},
			_1: {ctor: '[]'}
		}
	}
};
var _user$project$Board$renderList = function (grid) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(_user$project$Board$gridStyle),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (_p0) {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(_user$project$Board$rowStyle),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, _user$project$Board$cell, _p0));
			},
			grid));
};
var _user$project$Board$initialCell = F2(
	function (y_, x_) {
		var chkColor = A2(_user$project$CheckerUtils$getInitialCheckerColor, x_, y_);
		var checkerColor = A2(_user$project$CheckerUtils$getInitialCheckerColor2, x_, y_);
		var available = false;
		var selected = false;
		var hasChecker = A2(_user$project$CheckerUtils$initialCheckerCell, x_, y_);
		var y = y_;
		var x = x_;
		return A7(_user$project$CheckerUtils$Cell, x, y, hasChecker, selected, available, checkerColor, chkColor);
	});
var _user$project$Board$initialRow = function (y) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$Board$initialCell(y),
		A2(
			_elm_lang$core$List$indexedMap,
			function (y) {
				return F2(
					function (x, y) {
						return x + y;
					})(1);
			},
			A2(_elm_lang$core$List$range, -1, 6)));
};
var _user$project$Board$initialGrid = A2(
	_elm_lang$core$List$map,
	_user$project$Board$initialRow,
	A2(
		_elm_lang$core$List$indexedMap,
		function (y) {
			return F2(
				function (x, y) {
					return x + y;
				})(1);
		},
		A2(_elm_lang$core$List$range, -1, 6)));
